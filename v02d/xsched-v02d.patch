---

 xsched-xiphux/fs/proc/array.c           |    6 
 xsched-xiphux/include/linux/init_task.h |    5 
 xsched-xiphux/include/linux/sched.h     |   16 
 xsched-xiphux/include/linux/sysctl.h    |    1 
 xsched-xiphux/init/main.c               |    9 
 xsched-xiphux/kernel/sched.c            | 1296 +++++++++++++++++---------------
 xsched-xiphux/kernel/sysctl.c           |    7 
 xsched-xiphux/mm/oom_kill.c             |    1 
 8 files changed, 751 insertions(+), 590 deletions(-)

diff -puN fs/proc/array.c~xsched-v02d fs/proc/array.c
--- xsched/fs/proc/array.c~xsched-v02d	2004-08-14 21:17:43.000000000 -0400
+++ xsched-xiphux/fs/proc/array.c	2004-08-14 21:19:28.000000000 -0400
@@ -159,7 +159,9 @@ static inline char * task_state(struct t
 	read_lock(&tasklist_lock);
 	buffer += sprintf(buffer,
 		"State:\t%s\n"
-		"SleepAVG:\t%lu%%\n"
+ 		"sleep_avg:\t%lu\n"
+ 		"sleep_time:\t%lu\n"
+ 		"total_time:\t%lu\n"
 		"Tgid:\t%d\n"
 		"Pid:\t%d\n"
 		"PPid:\t%d\n"
@@ -167,7 +169,7 @@ static inline char * task_state(struct t
 		"Uid:\t%d\t%d\t%d\t%d\n"
 		"Gid:\t%d\t%d\t%d\t%d\n",
 		get_task_state(p),
-		(p->sleep_avg/1024)*100/(1020000000/1024),
+ 		p->sleep_avg, p->sleep_time, p->total_time,
 	       	p->tgid,
 		p->pid, p->pid ? p->real_parent->pid : 0,
 		p->pid && p->ptrace ? p->parent->pid : 0,
diff -puN include/linux/init_task.h~xsched-v02d include/linux/init_task.h
--- xsched/include/linux/init_task.h~xsched-v02d	2004-08-14 21:18:00.000000000 -0400
+++ xsched-xiphux/include/linux/init_task.h	2004-08-14 21:20:10.000000000 -0400
@@ -74,14 +74,13 @@ extern struct group_info init_groups;
 	.usage		= ATOMIC_INIT(2),				\
 	.flags		= 0,						\
 	.lock_depth	= -1,						\
-	.prio		= MAX_PRIO-20,					\
-	.static_prio	= MAX_PRIO-20,					\
+	.prio		= MAX_PRIO-29,					\
+	.static_prio	= MAX_PRIO-29,					\
 	.policy		= SCHED_NORMAL,					\
 	.cpus_allowed	= CPU_MASK_ALL,					\
 	.mm		= NULL,						\
 	.active_mm	= &init_mm,					\
 	.run_list	= LIST_HEAD_INIT(tsk.run_list),			\
-	.time_slice	= HZ,						\
 	.tasks		= LIST_HEAD_INIT(tsk.tasks),			\
 	.ptrace_children= LIST_HEAD_INIT(tsk.ptrace_children),		\
 	.ptrace_list	= LIST_HEAD_INIT(tsk.ptrace_list),		\
diff -puN include/linux/sched.h~xsched-v02d include/linux/sched.h
--- xsched/include/linux/sched.h~xsched-v02d	2004-08-14 21:18:04.000000000 -0400
+++ xsched-xiphux/include/linux/sched.h	2004-08-14 21:23:40.000000000 -0400
@@ -317,9 +317,9 @@ struct signal_struct {
 #define MAX_USER_RT_PRIO	100
 #define MAX_RT_PRIO		MAX_USER_RT_PRIO
 
-#define MAX_PRIO		(MAX_RT_PRIO + 40)
+#define MAX_PRIO		(MAX_RT_PRIO + 59)
 
-#define rt_task(p)		(unlikely((p)->prio < MAX_RT_PRIO))
+#define rt_task(p)		(unlikely((p)->policy != SCHED_NORMAL))
 
 /*
  * Some day this will be a full-fledged user tracking system..
@@ -348,7 +348,6 @@ extern struct user_struct *find_user(uid
 extern struct user_struct root_user;
 #define INIT_USER (&root_user)
 
-typedef struct prio_array prio_array_t;
 struct backing_dev_info;
 struct reclaim_state;
 
@@ -437,16 +436,14 @@ struct task_struct {
 
 	int prio, static_prio;
 	struct list_head run_list;
-	prio_array_t *array;
 
-	unsigned long sleep_avg;
-	long interactive_credit;
 	unsigned long long timestamp;
-	int activated;
+	unsigned long total_time, sleep_time;
+	unsigned long sleep_avg;
 
 	unsigned long policy;
 	cpumask_t cpus_allowed;
-	unsigned int time_slice, first_time_slice;
+	unsigned int time_slice;
 
 #ifdef CONFIG_SCHEDSTATS
 	struct sched_info sched_info;
@@ -624,6 +621,9 @@ do { if (atomic_dec_and_test(&(tsk)->usa
 #define PF_SWAPOFF	0x00080000	/* I am in swapoff */
 #define PF_LESS_THROTTLE 0x00100000	/* Throttle me less: I clean memory */
 #define PF_SYNCWRITE	0x00200000	/* I am doing a sync write */
+#define PF_FORKED	0x00400000	/* I have just forked */
+#define PF_YIELDED	0x00800000	/* I have just yielded */
+#define PF_UISLEEP	0x01000000	/* Uninterruptible sleep */
 
 #ifdef CONFIG_SMP
 extern int set_cpus_allowed(task_t *p, cpumask_t new_mask);
diff -puN init/main.c~xsched-v02d init/main.c
--- xsched/init/main.c~xsched-v02d	2004-08-14 21:18:08.000000000 -0400
+++ xsched-xiphux/init/main.c	2004-08-14 21:21:57.000000000 -0400
@@ -357,8 +357,15 @@ static void __init smp_init(void)
 #define smp_init()	do { } while (0)
 #endif
 
+unsigned long cache_decay_ticks;
 static inline void setup_per_cpu_areas(void) { }
-static inline void smp_prepare_cpus(unsigned int maxcpus) { }
+static void smp_prepare_cpus(unsigned int maxcpus)
+{
+	// Generic 2 tick cache_decay for uniprocessor
+	cache_decay_ticks = 2;
+	printk("Generic cache decay timeout: %ld msecs.\n",
+		(cache_decay_ticks * 1000 / HZ));
+}
 
 #else
 
diff -puN kernel/sched.c~xsched-v02d kernel/sched.c
--- xsched/kernel/sched.c~xsched-v02d	2004-08-14 21:18:12.000000000 -0400
+++ xsched-xiphux/kernel/sched.c	2004-08-14 23:20:30.000000000 -0400
@@ -16,6 +16,14 @@
  *		by Davide Libenzi, preemptible kernel bits by Robert Love.
  *  2003-09-03	Interactivity tuning by Con Kolivas.
  *  2004-04-02	Scheduler domains code by Nick Piggin
+ *  2004-07-12	Xsched scheduling policy by xiphux.  Thanks go to:
+ *  		- Peter William's SPA scheduler for the basic single
+ *  		  array prio-slot structure, as well as the interactivity
+ *  		  and throughput bonus algorithms.
+ *  		- Nick Piggin's Nicksched for the dynamic priority/timeslice
+ *  		  system based on task sleep time.
+ *  		- Con Kolivas's Staircase scheduler for the interactive and
+ *  		  compute sysctls as well as the forked/yielded process flags.
  */
 
 #include <linux/mm.h>
@@ -49,19 +57,13 @@
 
 #include <asm/unistd.h>
 
-#ifdef CONFIG_NUMA
-#define cpu_to_node_mask(cpu) node_to_cpumask(cpu_to_node(cpu))
-#else
-#define cpu_to_node_mask(cpu) (cpu_online_map)
-#endif
-
 /*
  * Convert user-nice values [ -20 ... 0 ... 19 ]
  * to static priority [ MAX_RT_PRIO..MAX_PRIO-1 ],
  * and back.
  */
-#define NICE_TO_PRIO(nice)	(MAX_RT_PRIO + (nice) + 20)
-#define PRIO_TO_NICE(prio)	((prio) - MAX_RT_PRIO - 20)
+#define NICE_TO_PRIO(nice)	(MAX_RT_PRIO + (nice) + 30)
+#define PRIO_TO_NICE(prio)	((prio) - MAX_RT_PRIO - 30)
 #define TASK_NICE(p)		PRIO_TO_NICE((p)->static_prio)
 
 /*
@@ -70,118 +72,79 @@
  * it's a [ 0 ... 39 ] range.
  */
 #define USER_PRIO(p)		((p)-MAX_RT_PRIO)
-#define TASK_USER_PRIO(p)	USER_PRIO((p)->static_prio)
 #define MAX_USER_PRIO		(USER_PRIO(MAX_PRIO))
 
+#define US_TO_JIFFIES(x)	((x) * HZ / 1000000)
+#define JIFFIES_TO_US(x)	((x) * 1000000 / HZ)
+
+int sched_interactive = 1;
+int sched_compute = 0;
 /*
- * Some helpers for converting nanosecond timing to jiffy resolution
+ * MIN_TIMESLICE is the timeslice that a minimum priority process gets if there
+ * is a maximum priority process runnable. MAX_TIMESLICE is derived from the
+ * formula in task_timeslice. It cannot be changed here. It is the timesilce
+ * that the maximum priority process will get. Larger timeslices are attainable
+ * by low priority processes however.
  */
-#define NS_TO_JIFFIES(TIME)	((TIME) / (1000000000 / HZ))
-#define JIFFIES_TO_NS(TIME)	((TIME) * (1000000000 / HZ))
+int sched_base_timeslice = 64; /* This gets divided by 8 */
+int sched_rt_timeslice = 50;
+int sched_min_base = 1;
+int sched_max_base = 10000;
 
-/*
- * These are the 'tuning knobs' of the scheduler:
- *
- * Minimum timeslice is 5 msecs (or 1 jiffy, whichever is larger),
- * default timeslice is 100 msecs, maximum timeslice is 800 msecs.
- * Timeslices get refilled after they expire.
- */
-#define MIN_TIMESLICE		max(5 * HZ / 1000, 1)
-#define DEF_TIMESLICE		(100 * HZ / 1000)
-#define ON_RUNQUEUE_WEIGHT	 30
-#define CHILD_PENALTY		 95
-#define PARENT_PENALTY		100
-#define EXIT_WEIGHT		  3
-#define PRIO_BONUS_RATIO	 25
-#define MAX_BONUS		(MAX_USER_PRIO * PRIO_BONUS_RATIO / 100)
-#define INTERACTIVE_DELTA	  2
-#define MAX_SLEEP_AVG		(DEF_TIMESLICE * MAX_BONUS)
-#define STARVATION_LIMIT	(MAX_SLEEP_AVG)
-#define NS_MAX_SLEEP_AVG	(JIFFIES_TO_NS(MAX_SLEEP_AVG))
-#define CREDIT_LIMIT		100
-
-/*
- * If a task is 'interactive' then we reinsert it in the active
- * array after it has expired its current timeslice. (it will not
- * continue to run immediately, it will still roundrobin with
- * other interactive tasks.)
- *
- * This part scales the interactivity limit depending on niceness.
- *
- * We scale it linearly, offset by the INTERACTIVE_DELTA delta.
- * Here are a few examples of different nice levels:
- *
- *  TASK_INTERACTIVE(-20): [1,1,1,1,1,1,1,1,1,0,0]
- *  TASK_INTERACTIVE(-10): [1,1,1,1,1,1,1,0,0,0,0]
- *  TASK_INTERACTIVE(  0): [1,1,1,1,0,0,0,0,0,0,0]
- *  TASK_INTERACTIVE( 10): [1,1,0,0,0,0,0,0,0,0,0]
- *  TASK_INTERACTIVE( 19): [0,0,0,0,0,0,0,0,0,0,0]
- *
- * (the X axis represents the possible -5 ... 0 ... +5 dynamic
- *  priority range a task can explore, a value of '1' means the
- *  task is rated interactive.)
- *
- * Ie. nice +19 tasks can never get 'interactive' enough to be
- * reinserted into the active array. And only heavily CPU-hog nice -20
- * tasks will be expired. Default nice 0 tasks are somewhere between,
- * it takes some effort for them to get interactive, but it's not
- * too hard.
- */
-
-#define CURRENT_BONUS(p) \
-	(NS_TO_JIFFIES((p)->sleep_avg) * MAX_BONUS / \
-		MAX_SLEEP_AVG)
+int scaled_rt_timeslice = 50;
 
-#ifdef CONFIG_SMP
-#define TIMESLICE_GRANULARITY(p)	(MIN_TIMESLICE * \
-		(1 << (((MAX_BONUS - CURRENT_BONUS(p)) ? : 1) - 1)) * \
-			num_online_cpus())
-#else
-#define TIMESLICE_GRANULARITY(p)	(MIN_TIMESLICE * \
-		(1 << (((MAX_BONUS - CURRENT_BONUS(p)) ? : 1) - 1)))
-#endif
+#define RT_TIMESLICE		(sched_rt_timeslice)
+#define BASE_TIMESLICE		(sched_base_timeslice)
+#define MIN_TIMESLICE		(BASE_TIMESLICE * HZ / 1000 / 4 / 8 ?: 1)
+#define MAX_TIMESLICE		(BASE_TIMESLICE * (MAX_USER_PRIO + 1)/3 * 2 / 8)
 
-#define SCALE(v1,v1_max,v2_max) \
-	(v1) * (v2_max) / (v1_max)
+/* Maximum amount of history that will be used to calculate priority */
+int max_sleep_shift = 19;
 
-#define DELTA(p) \
-	(SCALE(TASK_NICE(p), 40, MAX_BONUS) + INTERACTIVE_DELTA)
+#define MAX_SLEEP		(1UL << max_sleep_shift)
 
-#define TASK_INTERACTIVE(p) \
-	((p)->prio <= (p)->static_prio - DELTA(p))
+/*
+ * Maximum effect that 1 block of activity (run/sleep/etc) can have. This is
+ * will moderate dicard freak events (eg. SIGSTOP)
+ */
+int max_sleep_affect_factor = 16;
+#define MAX_SLEEP_AFFECT	(MAX_SLEEP/max_sleep_affect_factor)
 
-#define INTERACTIVE_SLEEP(p) \
-	(JIFFIES_TO_NS(MAX_SLEEP_AVG * \
-		(MAX_BONUS / 2 + DELTA((p)) + 1) / MAX_BONUS - 1))
+int max_run_affect_factor = 16;
+#define MAX_RUN_AFFECT		(MAX_SLEEP/max_run_affect_factor)
 
-#define HIGH_CREDIT(p) \
-	((p)->interactive_credit > CREDIT_LIMIT)
+/*
+ * The amount of history can be decreased (on fork for example). This puts a
+ * lower bound on it.
+ */
+int min_history_factor = 8;
+#define MIN_HISTORY		(MAX_SLEEP/min_history_factor)
 
-#define LOW_CREDIT(p) \
-	((p)->interactive_credit < -CREDIT_LIMIT)
+#define FORKED_TS_MAX		(US_TO_JIFFIES(MIN_HISTORY) ?: 1)
 
-#define TASK_PREEMPTS_CURR(p, rq) \
-	((p)->prio < (rq)->curr->prio)
+/*
+ * sleep_factor is a fixed point factor used to scale history tracking things.
+ * In particular: total_time, sleep_time, sleep_avg.
+ */
+int sleep_factor = 1024;
 
 /*
- * task_timeslice() scales user-nice values [ -20 ... 0 ... 19 ]
- * to time slice values: [800ms ... 100ms ... 5ms]
- *
- * The higher a thread's priority, the bigger timeslices
- * it gets during one round of execution. But even the lowest
- * priority thread gets MIN_TIMESLICE worth of execution time.
+ * Xsched bonuses
  */
+int uisleep_factor = 2;
+int shatter_ratio = 8;
+int interactive_limit = 3;
+#define TASK_INTERACTIVE(p)			((p)->static_prio - (p)->prio >= interactive_limit)
+#define SLICE_SHATTER(slice, ratio)		((slice) % (slice / ratio) == 0)
 
-#define SCALE_PRIO(x, prio) \
-	max(x * (MAX_PRIO - prio) / (MAX_USER_PRIO/2), MIN_TIMESLICE)
+/*
+ * The scheduler classifies a process as performing one of the following
+ * activities
+ */
+#define STIME_SLEEP		1	/* Sleeping */
+#define STIME_RUN		2	/* Using CPU */
+#define STIME_WAIT		3	/* Waiting on runqueue */
 
-static unsigned int task_timeslice(task_t *p)
-{
-	if (p->static_prio < NICE_TO_PRIO(0))
-		return SCALE_PRIO(DEF_TIMESLICE*4, p->static_prio);
-	else
-		return SCALE_PRIO(DEF_TIMESLICE, p->static_prio);
-}
 #define task_hot(p, now, sd) ((now) - (p)->timestamp < (sd)->cache_hot_time)
 
 enum idle_type
@@ -197,15 +160,18 @@ struct sched_domain;
 /*
  * These are the runqueue data structures:
  */
+#define NUM_PRIO_SLOTS (MAX_PRIO + 1)
 
-#define BITMAP_SIZE ((((MAX_PRIO+1+7)/8)+sizeof(long)-1)/sizeof(long))
+/*
+ * Is the run queue idle?
+ */
+#define RUNQUEUE_IDLE(rq) ((rq)->curr == (rq)->idle)
 
 typedef struct runqueue runqueue_t;
 
-struct prio_array {
-	unsigned int nr_active;
-	unsigned long bitmap[BITMAP_SIZE];
-	struct list_head queue[MAX_PRIO];
+struct prio_slot {
+	unsigned int prio;
+	struct list_head queue;
 };
 
 /*
@@ -227,15 +193,20 @@ struct runqueue {
 	unsigned long cpu_load;
 #endif
 	unsigned long long nr_switches;
-	unsigned long expired_timestamp, nr_uninterruptible;
-	unsigned long long timestamp_last_tick;
+	unsigned long nr_uninterruptible;
+	unsigned int cache_ticks, preempted;
 	task_t *curr, *idle;
 	struct mm_struct *prev_mm;
-	prio_array_t *active, *expired, arrays[2];
-	int best_expired_prio;
+	int min_prio;
+	int min_nice;
+	DECLARE_BITMAP(bitmap, NUM_PRIO_SLOTS);
+	struct prio_slot queues[NUM_PRIO_SLOTS];
+	struct prio_slot *current_prio_slot;
 	atomic_t nr_iowait;
 
 #ifdef CONFIG_SMP
+	unsigned long long timestamp_last_tick;
+
 	struct sched_domain *sd;
 
 	/* For active balancing */
@@ -389,7 +360,7 @@ struct sched_domain {
 	.max_interval		= 4,			\
 	.busy_factor		= 64,			\
 	.imbalance_pct		= 125,			\
-	.cache_hot_time		= (5*1000000/2),	\
+	.cache_hot_time		= (5*1000/2),	\
 	.cache_nice_tries	= 1,			\
 	.per_cpu_gain		= 100,			\
 	.flags			= SD_BALANCE_NEWIDLE	\
@@ -411,7 +382,7 @@ struct sched_domain {
 	.max_interval		= 32,			\
 	.busy_factor		= 32,			\
 	.imbalance_pct		= 125,			\
-	.cache_hot_time		= (10*1000000),		\
+	.cache_hot_time		= (10*1000),		\
 	.cache_nice_tries	= 1,			\
 	.per_cpu_gain		= 100,			\
 	.flags			= SD_BALANCE_EXEC	\
@@ -442,6 +413,11 @@ struct sched_domain {
 # define task_running(rq, p)		((rq)->curr == (p))
 #endif
 
+static inline unsigned long long clock_us(void)
+{
+	return sched_clock() >> 10;
+}
+
 /*
  * task_rq_lock - lock the runqueue a given task resides on and disable
  * interrupts.  Note the ordering: we can safely lookup the task_rq without
@@ -690,24 +666,58 @@ static inline void sched_info_switch(tas
 #define sched_info_switch(t, next)	do { } while (0)
 #endif /* CONFIG_SCHEDSTATS */
 
+static inline int task_preempts_curr(const struct task_struct *p, runqueue_t *rq)
+{
+	if (p->prio < rq->current_prio_slot->prio) {
+		if (rt_task(p) || rq->cache_ticks >= cache_decay_ticks ||
+			!p->mm || rq->curr == rq->idle)
+				return 1;
+		rq->preempted = 1;
+	}
+
+	return 0;
+}
+
+static inline int task_queued(const task_t *task)
+{
+	return !list_empty(&task->run_list);
+}
+
+static inline void update_min_prio(const task_t *p, runqueue_t *rq)
+{
+	if (likely(!rt_task(p))) {
+		if (p->prio < rq->min_prio)
+			rq->min_prio = p->prio;
+		if (p->static_prio < rq->min_nice)
+			rq->min_nice = p->static_prio;
+	}
+}
+
 /*
  * Adding/removing a task to/from a priority array:
  */
-static void dequeue_task(struct task_struct *p, prio_array_t *array)
+static void dequeue_task(struct task_struct *p)
 {
-	array->nr_active--;
-	list_del(&p->run_list);
-	if (list_empty(array->queue + p->prio))
-		__clear_bit(p->prio, array->bitmap);
+	struct list_head *slotp = p->run_list.next;
+	list_del_init(&p->run_list);
+	if (list_empty(slotp))
+		__clear_bit(list_entry(slotp, struct prio_slot, queue)->prio, task_rq(p)->bitmap);
 }
 
-static void enqueue_task(struct task_struct *p, prio_array_t *array)
+static void enqueue_task(struct task_struct *p, runqueue_t *rq)
 {
+	struct list_head *entry = &rq->queues[p->prio].queue;
 	sched_info_queued(p);
-	list_add_tail(&p->run_list, array->queue + p->prio);
-	__set_bit(p->prio, array->bitmap);
-	array->nr_active++;
-	p->array = array;
+	if (!rt_task(p)) {
+		/*
+		 * Cycle tasks on the same priority level. This reduces their
+		 * timeslice fluctuations due to higher priority tasks expiring.
+		 */
+		if (!list_empty(entry))
+			entry = entry->next;
+	}
+	list_add_tail(&p->run_list, entry);
+	__set_bit(p->prio, rq->bitmap);
 }
 
 /*
@@ -715,52 +725,188 @@ static void enqueue_task(struct task_str
  * remote queue so we want these tasks to show up at the head of the
  * local queue:
  */
-static inline void enqueue_task_head(struct task_struct *p, prio_array_t *array)
+static inline void enqueue_task_head(struct task_struct *p, runqueue_t *rq)
 {
-	list_add(&p->run_list, array->queue + p->prio);
-	__set_bit(p->prio, array->bitmap);
-	array->nr_active++;
-	p->array = array;
+	struct list_head *entry = &rq->queues[p->prio].queue;
+	if (!list_empty(entry))
+		entry = entry->next;
+	list_add(&p->run_list, entry);
+	__set_bit(p->prio, rq->bitmap);
 }
 
 /*
- * effective_prio - return the priority that is based on the static
- * priority but is modified by bonuses/penalties.
- *
- * We scale the actual sleep average [0 .... MAX_SLEEP_AVG]
- * into the -5 ... 0 ... +5 bonus/penalty range.
- *
- * We use 25% of the full 0...39 priority range so that:
- *
- * 1) nice +19 interactive tasks do not preempt nice 0 CPU hogs.
- * 2) nice -20 CPU hogs do not get preempted by nice 0 tasks.
+ * add_task_time updates a task @p after @time of doing the specified @type
+ * of activity. See STIME_*. This is used for priority calculation.
+ */
+static inline void add_task_time(task_t *p, unsigned long long time, unsigned long type)
+{
+	unsigned long ratio;
+	unsigned long max_affect;
+	unsigned long long tmp;
+
+	if (time == 0)
+		return;
+
+	if (type == STIME_SLEEP)
+		max_affect = MAX_SLEEP_AFFECT;
+	else
+		max_affect = MAX_RUN_AFFECT;
+
+	if (type == STIME_SLEEP)
+		time /= 2;
+
+	if (time > max_affect)
+		time = max_affect;
+
+	ratio = MAX_SLEEP - time;
+	tmp = (unsigned long long)ratio*p->total_time + MAX_SLEEP/2;
+	tmp >>= max_sleep_shift;
+	p->total_time = (unsigned long)tmp;
+
+	tmp = (unsigned long long)ratio*p->sleep_time + MAX_SLEEP/2;
+	tmp >>= max_sleep_shift;
+	p->sleep_time = (unsigned long)tmp;
+
+	if (type != STIME_WAIT) {
+		p->total_time += time;
+		if (type == STIME_SLEEP)
+			p->sleep_time += time;
+
+		p->sleep_avg = (sleep_factor * p->sleep_time) / p->total_time;
+	}
+}
+
+/*
+ * The higher a thread's priority, the bigger timeslices
+ * it gets during one round of execution. But even the lowest
+ * priority thread gets MIN_TIMESLICE worth of execution time.
  *
- * Both properties are important to certain workloads.
+ * Timeslices are scaled, so if only low priority processes are running,
+ * they will all get long timeslices.
  */
-static int effective_prio(task_t *p)
+static int task_timeslice(task_t *p, runqueue_t *rq)
 {
-	int bonus, prio;
+	int idx, base, delta;
+	int timeslice;
+
+	if (rt_task(p)) {
+		if (!sched_interactive)
+			return RT_TIMESLICE;
+		timeslice = scaled_rt_timeslice;
+		if (scaled_rt_timeslice != RT_TIMESLICE)
+			scaled_rt_timeslice = (scaled_rt_timeslice + RT_TIMESLICE) >> 1;
+		return timeslice;
+	}
+
+	idx = min(p->prio, rq->min_prio);
+	delta = p->prio - idx;
+	base = BASE_TIMESLICE * (MAX_USER_PRIO + 1) / (delta + 3);
+
+	idx = min(rq->min_nice, p->static_prio);
+	delta = p->static_prio - idx;
+	timeslice = base * 2 / (delta + 2);
+
+	timeslice = timeslice * 30 / (60 - USER_PRIO(idx));
+	timeslice = timeslice * 30 / (60 - USER_PRIO(idx));
+
+	timeslice *= (1000 / HZ);
+	timeslice >>= 3;
+
+	if (sched_compute)
+		timeslice <<= 3;
+
+	if ((timeslice > scaled_rt_timeslice) && sched_interactive) {
+		delta = timeslice + scaled_rt_timeslice;
+		delta >>= 1;
+		scaled_rt_timeslice = timeslice + delta;
+	}
+
+	if (p->flags & PF_FORKED) {
+		if (timeslice > FORKED_TS_MAX)
+			timeslice = FORKED_TS_MAX;
+	}
+
+	if (timeslice < MIN_TIMESLICE)
+		timeslice = MIN_TIMESLICE;
+
+	return timeslice;
+}
+
+/*
+ * task_priority: calculates a task's priority based on previous running
+ * history (see add_task_time). The priority is just a simple linear function
+ * based on sleep_avg and static_prio.
+ */
+static inline int task_priority(task_t *p)
+{
+ 	int prio, bonus;
 
 	if (rt_task(p))
 		return p->prio;
 
-	bonus = CURRENT_BONUS(p) - MAX_BONUS / 2;
+	if (p->flags & PF_YIELDED)
+		return MAX_PRIO-1;
+
+	prio = USER_PRIO(p->static_prio) + 10;
+
+	bonus = (((MAX_USER_PRIO + 1) / 3) * p->sleep_avg + (sleep_factor / 2))
+					/ sleep_factor;
+
+	if ((p->flags & PF_UISLEEP) && sched_interactive)
+		bonus /= uisleep_factor;
+
+	bonus = MAX_RT_PRIO - bonus;
+
+	if ((p->mm == NULL) && sched_interactive)
+		bonus /= (uisleep_factor << 1);
+
+	prio += bonus;
 
-	prio = p->static_prio - bonus;
 	if (prio < MAX_RT_PRIO)
-		prio = MAX_RT_PRIO;
+		return MAX_RT_PRIO;
 	if (prio > MAX_PRIO-1)
-		prio = MAX_PRIO-1;
+		return MAX_PRIO-1;
+
 	return prio;
 }
 
 /*
+ * timeslice_shatter
+ * Here we prevent really large slices from monopolizing
+ * the CPU.  We'll 'shatter' the timeslice; essentially,
+ * break it into pieces.  None of the timeslice is lost,
+ * it's just regarded in pieces.
+ *
+ * This is only done for interactive tasks.
+ */
+static inline void timeslice_shatter(task_t *p, runqueue_t *rq)
+{
+	int slice, ratio;
+
+	ratio = (p->prio - rq->min_prio) / shatter_ratio;
+
+	if (ratio <= 1)
+		return;
+
+	slice = task_timeslice(p, rq);
+
+	if (slice <= ratio)
+		return;
+
+	if (SLICE_SHATTER(slice, ratio)) {
+		list_del_init(&p->run_list);
+		list_add_tail(&p->run_list, &rq->current_prio_slot->queue);
+	}
+}
+
+/*
  * __activate_task - move a task to the runqueue.
  */
 static inline void __activate_task(task_t *p, runqueue_t *rq)
 {
-	enqueue_task(p, rq->active);
+	enqueue_task(p, rq);
 	rq->nr_running++;
+	update_min_prio(p, rq);
 }
 
 /*
@@ -768,82 +914,9 @@ static inline void __activate_task(task_
  */
 static inline void __activate_idle_task(task_t *p, runqueue_t *rq)
 {
-	enqueue_task_head(p, rq->active);
+	enqueue_task_head(p, rq);
 	rq->nr_running++;
-}
-
-static void recalc_task_prio(task_t *p, unsigned long long now)
-{
-	unsigned long long __sleep_time = now - p->timestamp;
-	unsigned long sleep_time;
-
-	if (__sleep_time > NS_MAX_SLEEP_AVG)
-		sleep_time = NS_MAX_SLEEP_AVG;
-	else
-		sleep_time = (unsigned long)__sleep_time;
-
-	if (likely(sleep_time > 0)) {
-		/*
-		 * User tasks that sleep a long time are categorised as
-		 * idle and will get just interactive status to stay active &
-		 * prevent them suddenly becoming cpu hogs and starving
-		 * other processes.
-		 */
-		if (p->mm && p->activated != -1 &&
-			sleep_time > INTERACTIVE_SLEEP(p)) {
-				p->sleep_avg = JIFFIES_TO_NS(MAX_SLEEP_AVG -
-						DEF_TIMESLICE);
-				if (!HIGH_CREDIT(p))
-					p->interactive_credit++;
-		} else {
-			/*
-			 * The lower the sleep avg a task has the more
-			 * rapidly it will rise with sleep time.
-			 */
-			sleep_time *= (MAX_BONUS - CURRENT_BONUS(p)) ? : 1;
-
-			/*
-			 * Tasks with low interactive_credit are limited to
-			 * one timeslice worth of sleep avg bonus.
-			 */
-			if (LOW_CREDIT(p) &&
-			    sleep_time > JIFFIES_TO_NS(task_timeslice(p)))
-				sleep_time = JIFFIES_TO_NS(task_timeslice(p));
-
-			/*
-			 * Non high_credit tasks waking from uninterruptible
-			 * sleep are limited in their sleep_avg rise as they
-			 * are likely to be cpu hogs waiting on I/O
-			 */
-			if (p->activated == -1 && !HIGH_CREDIT(p) && p->mm) {
-				if (p->sleep_avg >= INTERACTIVE_SLEEP(p))
-					sleep_time = 0;
-				else if (p->sleep_avg + sleep_time >=
-						INTERACTIVE_SLEEP(p)) {
-					p->sleep_avg = INTERACTIVE_SLEEP(p);
-					sleep_time = 0;
-				}
-			}
-
-			/*
-			 * This code gives a bonus to interactive tasks.
-			 *
-			 * The boost works by updating the 'average sleep time'
-			 * value here, based on ->timestamp. The more time a
-			 * task spends sleeping, the higher the average gets -
-			 * and the higher the priority boost gets as well.
-			 */
-			p->sleep_avg += sleep_time;
-
-			if (p->sleep_avg > NS_MAX_SLEEP_AVG) {
-				p->sleep_avg = NS_MAX_SLEEP_AVG;
-				if (!HIGH_CREDIT(p))
-					p->interactive_credit++;
-			}
-		}
-	}
-
-	p->prio = effective_prio(p);
+	update_min_prio(p, rq);
 }
 
 /*
@@ -854,9 +927,9 @@ static void recalc_task_prio(task_t *p, 
  */
 static void activate_task(task_t *p, runqueue_t *rq, int local)
 {
-	unsigned long long now;
+	unsigned long long now, sleep;
 
-	now = sched_clock();
+	now = clock_us();
 #ifdef CONFIG_SMP
 	if (!local) {
 		/* Compensate for drifting sched_clock */
@@ -866,30 +939,10 @@ static void activate_task(task_t *p, run
 	}
 #endif
 
-	recalc_task_prio(p, now);
-
-	/*
-	 * This checks to make sure it's not an uninterruptible task
-	 * that is now waking up.
-	 */
-	if (!p->activated) {
-		/*
-		 * Tasks which were woken up by interrupts (ie. hw events)
-		 * are most likely of interactive nature. So we give them
-		 * the credit of extending their sleep time to the period
-		 * of time they spend on the runqueue, waiting for execution
-		 * on a CPU, first time around:
-		 */
-		if (in_interrupt())
-			p->activated = 2;
-		else {
-			/*
-			 * Normal first-time wakeups get a credit too for
-			 * on-runqueue time, but it will be weighted down:
-			 */
-			p->activated = 1;
-		}
-	}
+	sleep = now - p->timestamp;
+	add_task_time(p, sleep, STIME_SLEEP);
+	p->flags &= ~PF_UISLEEP;
+	p->prio = task_priority(p);
 	p->timestamp = now;
 
 	__activate_task(p, rq);
@@ -898,13 +951,10 @@ static void activate_task(task_t *p, run
 /*
  * deactivate_task - remove a task from the runqueue.
  */
-static void deactivate_task(struct task_struct *p, runqueue_t *rq)
+static inline void deactivate_task(struct task_struct *p, runqueue_t *rq)
 {
 	rq->nr_running--;
-	if (p->state == TASK_UNINTERRUPTIBLE)
-		rq->nr_uninterruptible++;
-	dequeue_task(p, p->array);
-	p->array = NULL;
+	dequeue_task(p);
 }
 
 /*
@@ -977,7 +1027,7 @@ static int migrate_task(task_t *p, int d
 	 * If the task is not on a runqueue (and not running), then
 	 * it is sufficient to simply update the task's cpu field.
 	 */
-	if (!p->array && !task_running(rq, p)) {
+	if (!task_queued(p) && !task_running(rq, p)) {
 		set_task_cpu(p, dest_cpu);
 		return 0;
 	}
@@ -1008,7 +1058,7 @@ void wait_task_inactive(task_t * p)
 repeat:
 	rq = task_rq_lock(p, &flags);
 	/* Must be off runqueue entirely, not preempted. */
-	if (unlikely(p->array)) {
+	if (unlikely(task_queued(p))) {
 		/* If it's preempted, we yield.  It could be a while. */
 		preempted = !task_running(rq, p);
 		task_rq_unlock(rq, &flags);
@@ -1138,7 +1188,7 @@ static int try_to_wake_up(task_t * p, un
 	if (!(old_state & state))
 		goto out;
 
-	if (p->array)
+	if (task_queued(p))
 		goto out_running;
 
 	cpu = task_cpu(p);
@@ -1217,7 +1267,7 @@ out_set_cpu:
 		old_state = p->state;
 		if (!(old_state & state))
 			goto out;
-		if (p->array)
+		if (task_queued(p))
 			goto out_running;
 
 		this_cpu = smp_processor_id();
@@ -1226,26 +1276,12 @@ out_set_cpu:
 
 out_activate:
 #endif /* CONFIG_SMP */
-	if (old_state == TASK_UNINTERRUPTIBLE) {
-		rq->nr_uninterruptible--;
-		/*
-		 * Tasks on involuntary sleep don't earn
-		 * sleep_avg beyond just interactive state.
-		 */
-		p->activated = -1;
-	}
+	if (old_state == TASK_UNINTERRUPTIBLE)
+ 		rq->nr_uninterruptible--;
 
-	/*
-	 * Sync wakeups (i.e. those types of wakeups where the waker
-	 * has indicated that it will leave the CPU in short order)
-	 * don't trigger a preemption, if the woken up task will run on
-	 * this cpu. (in this case the 'I will reschedule' promise of
-	 * the waker guarantees that the freshly woken up task is going
-	 * to be considered on this CPU.)
-	 */
 	activate_task(p, rq, cpu == this_cpu);
 	if (!sync || cpu != this_cpu) {
-		if (TASK_PREEMPTS_CURR(p, rq))
+		if (task_preempts_curr(p, rq))
 			resched_task(rq->curr);
 	}
 	success = 1;
@@ -1290,7 +1326,6 @@ void fastcall sched_fork(task_t *p)
 	 */
 	p->state = TASK_RUNNING;
 	INIT_LIST_HEAD(&p->run_list);
-	p->array = NULL;
 	spin_lock_init(&p->switch_lock);
 #ifdef CONFIG_SCHEDSTATS
 	memset(&p->sched_info, 0, sizeof(p->sched_info));
@@ -1305,32 +1340,16 @@ void fastcall sched_fork(task_t *p)
 	p->thread_info->preempt_count = 1;
 #endif
 	/*
-	 * Share the timeslice between parent and child, thus the
-	 * total amount of pending timeslices in the system doesn't change,
-	 * resulting in more scheduling fairness.
+	 * Get MIN_HISTORY of history with the same sleep_avg as parent.
 	 */
-	local_irq_disable();
-	p->time_slice = (current->time_slice + 1) >> 1;
+	p->sleep_avg = current->sleep_avg;
+	p->total_time = MIN_HISTORY;
+	p->sleep_time = p->total_time * p->sleep_avg / sleep_factor;
+
 	/*
-	 * The remainder of the first timeslice might be recovered by
-	 * the parent if the child exits early enough.
+	 * Parent loses 1/4 sleep_time for forking.
 	 */
-	p->first_time_slice = 1;
-	current->time_slice >>= 1;
-	p->timestamp = sched_clock();
-	if (unlikely(!current->time_slice)) {
-		/*
-		 * This case is rare, it happens when the parent has only
-		 * a single jiffy left from its timeslice. Taking the
-		 * runqueue lock is not a problem.
-		 */
-		current->time_slice = 1;
-		preempt_disable();
-		scheduler_tick(0, 0);
-		local_irq_enable();
-		preempt_enable();
-	} else
-		local_irq_enable();
+	current->sleep_time = 3*current->sleep_time / 4;
 }
 
 /*
@@ -1346,48 +1365,38 @@ void fastcall wake_up_new_task(task_t * 
 	int this_cpu, cpu;
 	runqueue_t *rq;
 
+	BUG_ON(p->state != TASK_RUNNING);
+
 	rq = task_rq_lock(p, &flags);
+	p->timestamp = clock_us();
 	cpu = task_cpu(p);
 	this_cpu = smp_processor_id();
 
-	BUG_ON(p->state != TASK_RUNNING);
-
-	schedstat_inc(rq, wunt_cnt);
-	/*
-	 * We decrease the sleep average of forking parents
-	 * and children as well, to keep max-interactive tasks
-	 * from forking tasks that are max-interactive. The parent
-	 * (current) is done further down, under its lock.
-	 */
-	p->sleep_avg = JIFFIES_TO_NS(CURRENT_BONUS(p) *
-		CHILD_PENALTY / 100 * MAX_SLEEP_AVG / MAX_BONUS);
-
-	p->interactive_credit = 0;
-
-	p->prio = effective_prio(p);
+	p->prio = task_priority(p);
+	current->flags |= PF_FORKED;
 
 	if (likely(cpu == this_cpu)) {
 		if (!(clone_flags & CLONE_VM)) {
-			/*
-			 * The VM isn't cloned, so we're in a good position to
-			 * do child-runs-first in anticipation of an exec. This
-			 * usually avoids a lot of COW overhead.
-			 */
-			if (unlikely(!current->array))
-				__activate_task(p, rq);
-			else {
+		 	/*
+		 	 * Now that the idle task is back on the run queue we need extra care
+		 	 * to make sure that its one and only fork() doesn't end up in the idle
+		 	 * priority slot.  Just testing for empty run list is no longer adequate.
+		 	 */
+			if (p->prio >= current->prio && !RUNQUEUE_IDLE(rq)) {
 				p->prio = current->prio;
 				list_add_tail(&p->run_list, &current->run_list);
-				p->array = current->array;
-				p->array->nr_active++;
 				rq->nr_running++;
-			}
+			} else
+		 		__activate_task(p, rq);
+
 			set_need_resched();
 		} else
 			/* Run child last */
 			__activate_task(p, rq);
-	} else {
-		runqueue_t *this_rq = cpu_rq(this_cpu);
+	}
+#ifdef CONFIG_SMP
+	else {
+		runqueue_t *this_rq = this_rq();
 
 		/*
 		 * Not the local CPU - must adjust timestamp. This should
@@ -1396,20 +1405,17 @@ void fastcall wake_up_new_task(task_t * 
 		p->timestamp = (p->timestamp - this_rq->timestamp_last_tick)
 					+ rq->timestamp_last_tick;
 		__activate_task(p, rq);
-		if (TASK_PREEMPTS_CURR(p, rq))
+		if (task_preempts_curr(p, rq))
 			resched_task(rq->curr);
 
-		current->sleep_avg = JIFFIES_TO_NS(CURRENT_BONUS(current) *
-			PARENT_PENALTY / 100 * MAX_SLEEP_AVG / MAX_BONUS);
 		schedstat_inc(rq, wunt_moved);
 	}
+#endif
 
 	if (unlikely(cpu != this_cpu)) {
 		task_rq_unlock(rq, &flags);
 		rq = task_rq_lock(current, &flags);
 	}
-	current->sleep_avg = JIFFIES_TO_NS(CURRENT_BONUS(current) *
-		PARENT_PENALTY / 100 * MAX_SLEEP_AVG / MAX_BONUS);
 	task_rq_unlock(rq, &flags);
 }
 
@@ -1424,23 +1430,15 @@ void fastcall wake_up_new_task(task_t * 
  */
 void fastcall sched_exit(task_t * p)
 {
+	task_t *parent = p->parent;
 	unsigned long flags;
 	runqueue_t *rq;
 
-	/*
-	 * If the child was a (relative-) CPU hog then decrease
-	 * the sleep_avg of the parent as well.
-	 */
 	rq = task_rq_lock(p->parent, &flags);
-	if (p->first_time_slice) {
-		p->parent->time_slice += p->time_slice;
-		if (unlikely(p->parent->time_slice > task_timeslice(p)))
-			p->parent->time_slice = task_timeslice(p);
-	}
-	if (p->sleep_avg < p->parent->sleep_avg)
-		p->parent->sleep_avg = p->parent->sleep_avg /
-		(EXIT_WEIGHT + 1) * EXIT_WEIGHT + p->sleep_avg /
-		(EXIT_WEIGHT + 1);
+	parent->sleep_avg += 7*p->sleep_avg / 8;
+	if (parent->sleep_avg > sleep_factor)
+		parent->sleep_avg = sleep_factor;
+	parent->sleep_time = parent->sleep_avg * parent->total_time / sleep_factor;
 	task_rq_unlock(rq, &flags);
 }
 
@@ -1742,21 +1740,22 @@ out:
  * Both runqueues must be locked.
  */
 static inline
-void pull_task(runqueue_t *src_rq, prio_array_t *src_array, task_t *p,
-	       runqueue_t *this_rq, prio_array_t *this_array, int this_cpu)
+void pull_task(runqueue_t *src_rq, task_t *p,
+		runqueue_t *this_rq, int this_cpu)
 {
-	dequeue_task(p, src_array);
+	dequeue_task(p);
 	src_rq->nr_running--;
 	set_task_cpu(p, this_cpu);
 	this_rq->nr_running++;
-	enqueue_task(p, this_array);
+	enqueue_task(p, this_rq);
+	update_min_prio(p, this_rq);
 	p->timestamp = (p->timestamp - src_rq->timestamp_last_tick)
 				+ this_rq->timestamp_last_tick;
 	/*
 	 * Note that idle threads have a prio of MAX_PRIO, for this test
 	 * to be always true for them.
 	 */
-	if (TASK_PREEMPTS_CURR(p, this_rq))
+	if (task_preempts_curr(p, this_rq))
 		resched_task(this_rq->curr);
 }
 
@@ -1799,7 +1798,6 @@ static int move_tasks(runqueue_t *this_r
 		      unsigned long max_nr_move, struct sched_domain *sd,
 		      enum idle_type idle)
 {
-	prio_array_t *array, *dst_array;
 	struct list_head *head, *curr;
 	int idx, pulled = 0;
 	task_t *tmp;
@@ -1807,38 +1805,17 @@ static int move_tasks(runqueue_t *this_r
 	if (max_nr_move <= 0 || busiest->nr_running <= 1)
 		goto out;
 
-	/*
-	 * We first consider expired tasks. Those will likely not be
-	 * executed in the near future, and they are most likely to
-	 * be cache-cold, thus switching CPUs has the least effect
-	 * on them.
-	 */
-	if (busiest->expired->nr_active) {
-		array = busiest->expired;
-		dst_array = this_rq->expired;
-	} else {
-		array = busiest->active;
-		dst_array = this_rq->active;
-	}
-
-new_array:
 	/* Start searching at priority 0: */
 	idx = 0;
 skip_bitmap:
 	if (!idx)
-		idx = sched_find_first_bit(array->bitmap);
+		idx = sched_find_first_bit(busiest->bitmap);
 	else
-		idx = find_next_bit(array->bitmap, MAX_PRIO, idx);
-	if (idx >= MAX_PRIO) {
-		if (array == busiest->expired && busiest->active->nr_active) {
-			array = busiest->active;
-			dst_array = this_rq->active;
-			goto new_array;
-		}
+		idx = find_next_bit(busiest->bitmap, MAX_PRIO, idx);
+	if (idx >= MAX_PRIO)
 		goto out;
-	}
 
-	head = array->queue + idx;
+	head = &busiest->queues[idx].queue;
 	curr = head->prev;
 skip_queue:
 	tmp = list_entry(curr, task_t, run_list);
@@ -1860,7 +1837,7 @@ skip_queue:
 	schedstat_inc(this_rq, pt_gained[idle]);
 	schedstat_inc(busiest, pt_lost[idle]);
 
-	pull_task(busiest, array, tmp, this_rq, dst_array, this_cpu);
+	pull_task(busiest, tmp, this_rq, this_cpu);
 	pulled++;
 
 	/* We only want to steal up to the prescribed number of tasks. */
@@ -2321,6 +2298,11 @@ static void rebalance_tick(int this_cpu,
 		}
 	}
 }
+
+static inline int needs_idle_balance(const runqueue_t *rq)
+{
+	return rq->nr_running == 0;
+}
 #else
 /*
  * on UP we do not need to balance between CPUs:
@@ -2331,6 +2313,10 @@ static inline void rebalance_tick(int cp
 static inline void idle_balance(int cpu, runqueue_t *rq)
 {
 }
+static inline int needs_idle_balance(const runqueue_t *rq)
+{
+	return 0;
+}
 #endif
 
 static inline int wake_priority_sleeper(runqueue_t *rq)
@@ -2353,22 +2339,6 @@ DEFINE_PER_CPU(struct kernel_stat, kstat
 EXPORT_PER_CPU_SYMBOL(kstat);
 
 /*
- * We place interactive tasks back into the active array, if possible.
- *
- * To guarantee that this does not starve expired tasks we ignore the
- * interactivity of a task if the first expired task had to wait more
- * than a 'reasonable' amount of time. This deadline timeout is
- * load-dependent, as the frequency of array switched decreases with
- * increasing number of running tasks. We also ignore the interactivity
- * if a better static_prio task has expired:
- */
-#define EXPIRED_STARVING(rq) \
-	((STARVATION_LIMIT && ((rq)->expired_timestamp && \
-		(jiffies - (rq)->expired_timestamp >= \
-			STARVATION_LIMIT * ((rq)->nr_running) + 1))) || \
-			((rq)->curr->static_prio > (rq)->best_expired_prio))
-
-/*
  * This function gets called by the timer code, with HZ frequency.
  * We call it with interrupts disabled.
  *
@@ -2377,12 +2347,15 @@ EXPORT_PER_CPU_SYMBOL(kstat);
  */
 void scheduler_tick(int user_ticks, int sys_ticks)
 {
+	enum idle_type cpu_status;
 	int cpu = smp_processor_id();
 	struct cpu_usage_stat *cpustat = &kstat_this_cpu.cpustat;
 	runqueue_t *rq = this_rq();
 	task_t *p = current;
 
+#ifdef CONFIG_SMP
 	rq->timestamp_last_tick = sched_clock();
+#endif
 
 	if (rcu_pending(cpu))
 		rcu_check_callbacks(cpu, user_ticks);
@@ -2396,6 +2369,7 @@ void scheduler_tick(int user_ticks, int 
 		sys_ticks = 0;
 	}
 
+ 	cpu_status = NOT_IDLE;
 	if (p == rq->idle) {
 		if (atomic_read(&rq->nr_iowait) > 0)
 			cpustat->iowait += sys_ticks;
@@ -2403,95 +2377,64 @@ void scheduler_tick(int user_ticks, int 
 			cpustat->idle += sys_ticks;
 		if (wake_priority_sleeper(rq))
 			goto out;
-		rebalance_tick(cpu, rq, IDLE);
-		return;
+ 		cpu_status = IDLE;
+ 		goto out;
 	}
+
 	if (TASK_NICE(p) > 0)
 		cpustat->nice += user_ticks;
 	else
 		cpustat->user += user_ticks;
 	cpustat->system += sys_ticks;
 
-	/* Task might have expired already, but not scheduled off yet */
-	if (p->array != rq->active) {
-		set_tsk_need_resched(p);
+	/*
+	 * SCHED_FIFO tasks never run out of timeslice.
+	 */
+	if (unlikely(p->policy == SCHED_FIFO))
 		goto out;
-	}
 	spin_lock(&rq->lock);
+	rq->cache_ticks++;
 	/*
 	 * The task was running during this tick - update the
 	 * time slice counter. Note: we do not update a thread's
 	 * priority until it either goes to sleep or uses up its
-	 * timeslice. This makes it possible for interactive tasks
-	 * to use up their timeslices at their highest priority levels.
+	 * timeslice.
 	 */
-	if (rt_task(p)) {
+	if (unlikely(p->policy == SCHED_RR)) {
 		/*
 		 * RR tasks need a special form of timeslice management.
-		 * FIFO tasks have no timeslices.
 		 */
-		if ((p->policy == SCHED_RR) && !--p->time_slice) {
-			p->time_slice = task_timeslice(p);
-			p->first_time_slice = 0;
+		if (task_timeslice(p, rq) <= 1) {
 			set_tsk_need_resched(p);
 
-			/* put it at the end of the queue: */
-			dequeue_task(p, rq->active);
-			enqueue_task(p, rq->active);
+			/* put it at the end of the queue with a minimum of fuss
+			 */
+			list_del_init(&p->run_list);
+			list_add_tail(&p->run_list, &rq->current_prio_slot->queue);
+			p->flags &= ~PF_FORKED;
 		}
 		goto out_unlock;
 	}
-	if (!--p->time_slice) {
-		dequeue_task(p, rq->active);
+	if (task_timeslice(p, rq) <= 1) {
+		dequeue_task(p);
 		set_tsk_need_resched(p);
-		p->prio = effective_prio(p);
-		p->time_slice = task_timeslice(p);
-		p->first_time_slice = 0;
-
-		if (!rq->expired_timestamp)
-			rq->expired_timestamp = jiffies;
-		/*
-		 * Disable array switching temporarily to investigate
-		 * the effects (note that this doesnt guarantee fairness):
-		 */
-		if (0 && (!TASK_INTERACTIVE(p) || EXPIRED_STARVING(rq))) {
-			enqueue_task(p, rq->expired);
-			if (p->static_prio < rq->best_expired_prio)
-				rq->best_expired_prio = p->static_prio;
-		} else
-			enqueue_task(p, rq->active);
+		rq->current_prio_slot = rq->queues + task_priority(p);
+		p->prio = rq->current_prio_slot->prio;
+		update_min_prio(p, rq);
+		p->flags &= ~PF_FORKED;
+		goto out_unlock;
 	} else {
-		/*
-		 * Prevent a too long timeslice allowing a task to monopolize
-		 * the CPU. We do this by splitting up the timeslice into
-		 * smaller pieces.
-		 *
-		 * Note: this does not mean the task's timeslices expire or
-		 * get lost in any way, they just might be preempted by
-		 * another task of equal priority. (one with higher
-		 * priority would have preempted this task already.) We
-		 * requeue this task to the end of the list on this priority
-		 * level, which is in essence a round-robin of tasks with
-		 * equal priority.
-		 *
-		 * This only applies to tasks in the interactive
-		 * delta range with at least TIMESLICE_GRANULARITY to requeue.
-		 */
-		if (TASK_INTERACTIVE(p) && !((task_timeslice(p) -
-			p->time_slice) % TIMESLICE_GRANULARITY(p)) &&
-			(p->time_slice >= TIMESLICE_GRANULARITY(p)) &&
-			(p->array == rq->active)) {
-
-			dequeue_task(p, rq->active);
-			set_tsk_need_resched(p);
-			p->prio = effective_prio(p);
-			enqueue_task(p, rq->active);
-		}
+		/* Attempt to shatter the slice if it's interactive */
+		if (TASK_INTERACTIVE(p) && (p->mm != NULL) && sched_interactive &&
+				!(p->flags & (PF_UISLEEP | PF_FORKED | PF_YIELDED)))
+			timeslice_shatter(p, rq);
 	}
+	if (rq->preempted && rq->cache_ticks >= cache_decay_ticks)
+		set_tsk_need_resched(p);
 out_unlock:
 	spin_unlock(&rq->lock);
 out:
-	rebalance_tick(cpu, rq, NOT_IDLE);
+	rebalance_tick(cpu, rq, cpu_status);
 }
 
 #ifdef CONFIG_SCHED_SMT
@@ -2551,7 +2494,7 @@ static inline int dependent_sleeper(int 
 		 * physical cpu's resources. -ck
 		 */
 		if (((smt_curr->time_slice * (100 - sd->per_cpu_gain) / 100) >
-			task_timeslice(p) || rt_task(smt_curr)) &&
+			task_timeslice(p, rq) || rt_task(smt_curr)) &&
 			p->mm && smt_curr->mm && !rt_task(p))
 				ret = 1;
 
@@ -2561,7 +2504,7 @@ static inline int dependent_sleeper(int 
 		 * reasons.
 		 */
 		if ((((p->time_slice * (100 - sd->per_cpu_gain) / 100) >
-			task_timeslice(smt_curr) || rt_task(p)) &&
+			task_timeslice(smt_curr, smt_rq) || rt_task(p)) &&
 			smt_curr->mm && p->mm && !rt_task(smt_curr)) ||
 			(smt_curr == smt_rq->idle && smt_rq->nr_running))
 				resched_task(smt_curr);
@@ -2587,22 +2530,19 @@ asmlinkage void __sched schedule(void)
 	long *switch_count;
 	task_t *prev, *next;
 	runqueue_t *rq;
-	prio_array_t *array;
-	struct list_head *queue;
 	unsigned long long now;
-	unsigned long run_time;
-	int cpu, idx;
+	unsigned long run_time = 0;
+	int cpu;
 
 	/*
 	 * Test if we are atomic.  Since do_exit() needs to call into
 	 * schedule() atomically, we ignore that path for now.
 	 * Otherwise, whine if we are scheduling when we should not be.
 	 */
-	if (likely(!(current->state & (TASK_DEAD | TASK_ZOMBIE)))) {
-		if (unlikely(in_atomic())) {
-			printk(KERN_ERR "bad: scheduling while atomic!\n");
-			dump_stack();
-		}
+	if (unlikely(in_atomic()) &&
+			likely(!(current->state & (TASK_DEAD | TASK_ZOMBIE)))) {
+		printk(KERN_ERR "bad: scheduling while atomic!\n");
+		dump_stack();
 	}
 	profile_hit(SCHED_PROFILING, __builtin_return_address(0));
 
@@ -2622,19 +2562,10 @@ need_resched:
 
 	release_kernel_lock(prev);
 	schedstat_inc(rq, sched_cnt);
-	now = sched_clock();
-	if (likely(now - prev->timestamp < NS_MAX_SLEEP_AVG))
-		run_time = now - prev->timestamp;
-	else
-		run_time = NS_MAX_SLEEP_AVG;
-
-	/*
-	 * Tasks with interactive credits get charged less run_time
-	 * at high sleep_avg to delay them losing their interactive
-	 * status
-	 */
-	if (HIGH_CREDIT(prev))
-		run_time /= (CURRENT_BONUS(prev) ? : 1);
+	now = clock_us();
+	run_time = now - prev->timestamp;
+	prev->timestamp = now;
+	add_task_time(prev, run_time, STIME_RUN);
 
 	spin_lock_irq(&rq->lock);
 
@@ -2648,38 +2579,47 @@ need_resched:
 		if (unlikely((prev->state & TASK_INTERRUPTIBLE) &&
 				unlikely(signal_pending(prev))))
 			prev->state = TASK_RUNNING;
-		else
+		else {
 			deactivate_task(prev, rq);
+			if (prev->state == TASK_UNINTERRUPTIBLE) {
+				prev->flags |= PF_UISLEEP;
+				rq->nr_uninterruptible++;
+			}
+			goto no_check_expired;
+		}
 	}
 
+	if (unlikely(task_timeslice(prev, rq) <= 1)) {
+		set_tsk_need_resched(prev);
+		if (rt_task(prev)) {
+			if (prev->policy == SCHED_RR) {
+				list_del_init(&prev->run_list);
+				list_add_tail(&prev->run_list, &rq->current_prio_slot->queue);
+			}
+		} else {
+			dequeue_task(prev);
+			prev->prio = task_priority(prev);
+			rq->current_prio_slot = rq->queues + prev->prio;
+			enqueue_task(prev, rq);
+			update_min_prio(prev, rq);
+		}
+	}
+
+no_check_expired:
 	cpu = smp_processor_id();
-	if (unlikely(!rq->nr_running)) {
+	if (unlikely(needs_idle_balance(rq))) {
 		idle_balance(cpu, rq);
 		if (!rq->nr_running) {
-			next = rq->idle;
-			rq->expired_timestamp = 0;
-			wake_sleeping_dependent(cpu, rq);
-			goto switch_tasks;
+			rq->min_prio = MAX_PRIO;
+			rq->min_nice = MAX_PRIO;
+ 			next = rq->idle;
+ 			wake_sleeping_dependent(cpu, rq);
+ 			goto switch_tasks;
 		}
 	}
 
-	array = rq->active;
-	if (unlikely(!array->nr_active)) {
-		/*
-		 * Switch the active and expired arrays.
-		 */
-		schedstat_inc(rq, sched_switch);
-		rq->active = rq->expired;
-		rq->expired = array;
-		array = rq->active;
-		rq->expired_timestamp = 0;
-		rq->best_expired_prio = MAX_PRIO;
-	} else
-		schedstat_inc(rq, sched_noswitch);
-
-	idx = sched_find_first_bit(array->bitmap);
-	queue = array->queue + idx;
-	next = list_entry(queue->next, task_t, run_list);
+	rq->current_prio_slot = rq->queues + sched_find_first_bit(rq->bitmap);
+	next = list_entry(rq->current_prio_slot->queue.next, task_t, run_list);
 
 	if (dependent_sleeper(cpu, rq, next)) {
 		schedstat_inc(rq, sched_goidle);
@@ -2687,33 +2627,32 @@ need_resched:
 		goto switch_tasks;
 	}
 
-	if (!rt_task(next) && next->activated > 0) {
-		unsigned long long delta = now - next->timestamp;
-
-		if (next->activated == 1)
-			delta = delta * (ON_RUNQUEUE_WEIGHT * 128 / 100) / 128;
-
-		array = next->array;
-		dequeue_task(next, array);
-		recalc_task_prio(next, next->timestamp + delta);
-		enqueue_task(next, array);
-	}
-	next->activated = 0;
 switch_tasks:
 	prefetch(next);
 	clear_tsk_need_resched(prev);
 	rcu_qsctr_inc(task_cpu(prev));
 
-	prev->sleep_avg -= run_time;
-	if ((long)prev->sleep_avg <= 0) {
-		prev->sleep_avg = 0;
-		if (!(HIGH_CREDIT(prev) || LOW_CREDIT(prev)))
-			prev->interactive_credit--;
+	if (next->flags & PF_YIELDED) {
+		next->flags &= ~PF_YIELDED;
+		if (rt_task(next)) {
+			if (next->policy == SCHED_RR) {
+				list_del_init(&next->run_list);
+				list_add(&next->run_list, &rq->current_prio_slot->queue);
+			}
+		} else {
+			dequeue_task(next);
+			next->prio = task_priority(next);
+			rq->current_prio_slot = rq->queues + next->prio;
+			enqueue_task_head(next, rq);
+			update_min_prio(next, rq);
+		}
 	}
-	prev->timestamp = now;
 
 	sched_info_switch(prev, next);
 	if (likely(prev != next)) {
+		add_task_time(next, now - next->timestamp, STIME_WAIT);
+ 		rq->preempted = 0;
+ 		rq->cache_ticks = 0;
 		next->timestamp = now;
 		rq->nr_switches++;
 		rq->curr = next;
@@ -2976,9 +2915,8 @@ EXPORT_SYMBOL(sleep_on_timeout);
 void set_user_nice(task_t *p, long nice)
 {
 	unsigned long flags;
-	prio_array_t *array;
 	runqueue_t *rq;
-	int old_prio, new_prio, delta;
+	int queued, old_prio, new_prio, delta;
 
 	if (TASK_NICE(p) == nice || nice < -20 || nice > 19)
 		return;
@@ -2997,9 +2935,8 @@ void set_user_nice(task_t *p, long nice)
 		p->static_prio = NICE_TO_PRIO(nice);
 		goto out_unlock;
 	}
-	array = p->array;
-	if (array)
-		dequeue_task(p, array);
+	if ((queued = (!rt_task(p) && task_queued(p))))
+		dequeue_task(p);
 
 	old_prio = p->prio;
 	new_prio = NICE_TO_PRIO(nice);
@@ -3007,11 +2944,16 @@ void set_user_nice(task_t *p, long nice)
 	p->static_prio = NICE_TO_PRIO(nice);
 	p->prio += delta;
 
-	if (array) {
-		enqueue_task(p, array);
+	if (queued) {
+		p->prio = task_priority(p);
+		enqueue_task(p, rq);
+		update_min_prio(p, rq);
+		if (task_running(rq, p))
+			rq->current_prio_slot = rq->queues + p->prio;
+
 		/*
-		 * If the task increased its priority or is running and
-		 * lowered its priority, then reschedule its CPU:
+		 * If the task increased its setting or is running and lowered
+		 * its setting, then reschedule its CPU:
 		 */
 		if (delta < 0 || (delta > 0 && task_running(rq, p)))
 			resched_task(rq->curr);
@@ -3120,7 +3062,7 @@ static inline task_t *find_process_by_pi
 /* Actually do priority change: must hold rq lock. */
 static void __setscheduler(struct task_struct *p, int policy, int prio)
 {
-	BUG_ON(p->array);
+	BUG_ON(task_queued(p));
 	p->policy = policy;
 	p->rt_priority = prio;
 	if (policy != SCHED_NORMAL)
@@ -3137,7 +3079,7 @@ static int setscheduler(pid_t pid, int p
 	struct sched_param lp;
 	int retval = -EINVAL;
 	int oldprio;
-	prio_array_t *array;
+	int queued;
 	unsigned long flags;
 	runqueue_t *rq;
 	task_t *p;
@@ -3197,14 +3139,13 @@ static int setscheduler(pid_t pid, int p
 	if (retval)
 		goto out_unlock;
 
-	array = p->array;
-	if (array)
+ 	if ((queued = task_queued(p)))
 		deactivate_task(p, task_rq(p));
 	retval = 0;
 	oldprio = p->prio;
 	__setscheduler(p, policy, lp.sched_priority);
-	if (array) {
-		__activate_task(p, task_rq(p));
+	if (queued) {
+		__activate_task(p, rq);
 		/*
 		 * Reschedule if we are currently running on this runqueue and
 		 * our priority decreased, or if we are not currently running on
@@ -3213,8 +3154,9 @@ static int setscheduler(pid_t pid, int p
 		if (task_running(rq, p)) {
 			if (p->prio > oldprio)
 				resched_task(rq->curr);
-		} else if (TASK_PREEMPTS_CURR(p, rq))
+		} else if (task_preempts_curr(p, rq))
 			resched_task(rq->curr);
+		rq->current_prio_slot = rq->queues + p->prio;
 	}
 
 out_unlock:
@@ -3428,29 +3370,28 @@ out_unlock:
 asmlinkage long sys_sched_yield(void)
 {
 	runqueue_t *rq = this_rq_lock();
-	prio_array_t *array = current->array;
-	prio_array_t *target = rq->expired;
-
-	schedstat_inc(rq, yld_cnt);
-	/*
-	 * We implement yielding by moving the task into the expired
-	 * queue.
-	 *
-	 * (special rule: RT tasks will just roundrobin in the active
-	 *  array.)
-	 */
-	if (rt_task(current))
-		target = rq->active;
 
-	if (current->array->nr_active == 1) {
-		schedstat_inc(rq, yld_act_empty);
-		if (!rq->expired->nr_active)
-			schedstat_inc(rq, yld_both_empty);
-	} else if (!rq->expired->nr_active)
-		schedstat_inc(rq, yld_exp_empty);
+	if (likely(!rt_task(current))) {
+		int idx;
 
-	dequeue_task(current, array);
-	enqueue_task(current, target);
+		/* If there's other tasks on this CPU make sure that at least
+		 * one of them get some CPU before this task's next bite of the
+		 * cherry.  Dequeue before looking for the appropriate run
+		 * queue so that we don't find our queue if we were the sole
+		 * occupant of that queue.
+		 */
+		dequeue_task(current);
+		current->flags |= PF_YIELDED;
+		current->prio = task_priority(current);
+		idx = find_next_bit(rq->bitmap, MAX_PRIO, current->prio);
+		if (idx < MAX_PRIO)
+			current->prio = idx;
+		enqueue_task(current, rq);
+	} else {
+		list_del_init(&current->run_list);
+		list_add_tail(&current->run_list, &rq->current_prio_slot->queue);
+	}
+	update_min_prio(current, rq);
 
 	/*
 	 * Since we are going to call schedule() anyway, there's
@@ -3574,6 +3515,8 @@ long sys_sched_rr_get_interval(pid_t pid
 	int retval = -EINVAL;
 	struct timespec t;
 	task_t *p;
+ 	unsigned long flags;
+ 	runqueue_t *rq;
 
 	if (pid < 0)
 		goto out_nounlock;
@@ -3588,8 +3531,9 @@ long sys_sched_rr_get_interval(pid_t pid
 	if (retval)
 		goto out_unlock;
 
-	jiffies_to_timespec(p->policy & SCHED_FIFO ?
-				0 : task_timeslice(p), &t);
+ 	rq = task_rq_lock(p, &flags);
+ 	jiffies_to_timespec(p->policy & SCHED_FIFO ? 0 : task_timeslice(p, rq), &t);
+ 	task_rq_unlock(rq, &flags);
 	read_unlock(&tasklist_lock);
 	retval = copy_to_user(interval, &t, sizeof(t)) ? -EFAULT : 0;
 out_nounlock:
@@ -3703,8 +3647,6 @@ void __devinit init_idle(task_t *idle, i
 	unsigned long flags;
 
 	idle->sleep_avg = 0;
-	idle->interactive_credit = 0;
-	idle->array = NULL;
 	idle->prio = MAX_PRIO;
 	idle->state = TASK_RUNNING;
 	set_task_cpu(idle, cpu);
@@ -3819,8 +3761,7 @@ static void __migrate_task(struct task_s
 	if (!cpu_isset(dest_cpu, p->cpus_allowed))
 		goto out;
 
-	set_task_cpu(p, dest_cpu);
-	if (p->array) {
+	if (task_queued(p)) {
 		/*
 		 * Sync timestamp with rq_dest's before activating.
 		 * The same thing could be achieved by doing this step
@@ -3830,9 +3771,16 @@ static void __migrate_task(struct task_s
 		p->timestamp = p->timestamp - rq_src->timestamp_last_tick
 				+ rq_dest->timestamp_last_tick;
 		deactivate_task(p, rq_src);
+		/*
+		 * Do set_task_cpu() until AFTER we dequeue the task, since
+		 * dequeue_task() relies on task_cpu() always being accurate.
+		 */
+		set_task_cpu(p, dest_cpu);
 		activate_task(p, rq_dest, 0);
-		if (TASK_PREEMPTS_CURR(p, rq_dest))
+		if (task_preempts_curr(p, rq_dest))
 			resched_task(rq_dest->curr);
+	} else {
+		set_task_cpu(p, dest_cpu);
 	}
 
 out:
@@ -4035,6 +3983,9 @@ static int migration_call(struct notifie
 		deactivate_task(rq->idle, rq);
 		rq->idle->static_prio = MAX_PRIO;
 		__setscheduler(rq->idle, SCHED_NORMAL, 0);
+		rq->idle->prio = MAX_PRIO;
+		enqueue_task(rq->idle, rq);
+		update_min_prio(rq->idle, rq);
 		task_rq_unlock(rq, &flags);
 		BUG_ON(rq->nr_running != 0);
 
@@ -4489,7 +4440,7 @@ int in_sched_functions(unsigned long add
 void __init sched_init(void)
 {
 	runqueue_t *rq;
-	int i, j, k;
+	int i, j;
 
 #ifdef CONFIG_SMP
 	/* Set up an initial dummy domain for early boot */
@@ -4510,13 +4461,11 @@ void __init sched_init(void)
 #endif
 
 	for (i = 0; i < NR_CPUS; i++) {
-		prio_array_t *array;
-
 		rq = cpu_rq(i);
 		spin_lock_init(&rq->lock);
-		rq->active = rq->arrays;
-		rq->expired = rq->arrays + 1;
-		rq->best_expired_prio = MAX_PRIO;
+
+		rq->cache_ticks = 0;
+		rq->preempted = 0;
 
 #ifdef CONFIG_SMP
 		rq->sd = &sched_domain_init;
@@ -4528,15 +4477,21 @@ void __init sched_init(void)
 #endif
 		atomic_set(&rq->nr_iowait, 0);
 
-		for (j = 0; j < 2; j++) {
-			array = rq->arrays + j;
-			for (k = 0; k < MAX_PRIO; k++) {
-				INIT_LIST_HEAD(array->queue + k);
-				__clear_bit(k, array->bitmap);
-			}
-			// delimiter for bitsearch
-			__set_bit(MAX_PRIO, array->bitmap);
+		rq->min_prio = MAX_PRIO;
+		rq->min_nice = MAX_PRIO;
+		for (j = 0; j <= MAX_PRIO; j++) {
+			rq->queues[j].prio = j;
+			INIT_LIST_HEAD(&rq->queues[j].queue);
 		}
+		bitmap_zero(rq->bitmap, NUM_PRIO_SLOTS);
+		/*
+		 * delimiter for bitsearch
+		 */
+		__set_bit(MAX_PRIO, rq->bitmap);
+		rq->current_prio_slot = rq->queues + (MAX_PRIO - 29);
+#ifdef CONFIG_SMP
+		rq->timestamp_last_tick = clock_us();
+#endif
 	}
 
 	/*
@@ -4621,3 +4576,194 @@ void __sched __preempt_write_lock(rwlock
 
 EXPORT_SYMBOL(__preempt_write_lock);
 #endif /* defined(CONFIG_SMP) && defined(CONFIG_PREEMPT) */
+
+#if defined(CONFIG_SYSCTL)
+enum
+{
+	CPU_SCHED_END_OF_LIST=0,
+	CPU_NICKSCHED=1,
+	CPU_UISLEEP_FACTOR,
+	CPU_INTERACTIVE_LIMIT,
+	CPU_SHATTER_RATIO,
+	CPU_SCALED_RT_TIMESLICE,
+	CPU_INTERACTIVE,
+	CPU_COMPUTE,
+};
+
+enum
+{
+	CPU_NICKSCHED_END_OF_LIST=0,
+	CPU_NICKSCHED_RT_TIMESLICE=1,
+	CPU_NICKSCHED_BASE_TIMESLICE,
+	CPU_NICKSCHED_MAX_SLEEP_SHIFT,
+	CPU_NICKSCHED_MAX_SLEEP_AFFECT_FACTOR,
+	CPU_NICKSCHED_MAX_RUN_AFFECT_FACTOR,
+	CPU_NICKSCHED_MAX_WAIT_AFFECT_FACTOR,
+	CPU_NICKSCHED_MIN_HISTORY_FACTOR,
+	CPU_NICKSCHED_SLEEP_FACTOR,
+};
+
+static const unsigned int zero = 0;
+static const unsigned int one = 1;
+
+int minfactor = 1;
+int maxfactor = 30;
+
+int minshift = 1;
+int maxshift = 40;
+
+int minsleepfactor = 1;
+int maxsleepfactor = 2048;
+
+ctl_table cpu_nicksched_table[] = {
+	{
+		.ctl_name	= CPU_NICKSCHED_RT_TIMESLICE,
+		.procname	= "rt_timeslice",
+		.data		= &sched_rt_timeslice,
+		.maxlen		= sizeof(int),
+		.mode		= 0644,
+		.proc_handler	= &proc_dointvec_minmax,
+		.strategy	= &sysctl_intvec,
+		.extra1		= &sched_min_base,
+		.extra2		= &sched_max_base,
+	},
+	{
+		.ctl_name	= CPU_NICKSCHED_BASE_TIMESLICE,
+		.procname	= "base_timeslice",
+		.data		= &sched_base_timeslice,
+		.maxlen		= sizeof(int),
+		.mode		= 0644,
+		.proc_handler	= &proc_dointvec_minmax,
+		.strategy	= &sysctl_intvec,
+		.extra1		= &sched_min_base,
+		.extra2		= &sched_max_base,
+	},
+	{
+		.ctl_name	= CPU_NICKSCHED_MAX_SLEEP_SHIFT,
+		.procname	= "max_sleep_shift",
+		.data		= &max_sleep_shift,
+		.maxlen		= sizeof(int),
+		.mode		= 0644,
+		.proc_handler	= &proc_dointvec_minmax,
+		.strategy	= &sysctl_intvec,
+		.extra1		= &minshift,
+		.extra2		= &maxshift,
+	},
+	{
+		.ctl_name	= CPU_NICKSCHED_MAX_SLEEP_AFFECT_FACTOR,
+		.procname	= "max_sleep_affect_factor",
+		.data		= &max_sleep_affect_factor,
+		.maxlen		= sizeof(int),
+		.mode		= 0644,
+		.proc_handler	= &proc_dointvec_minmax,
+		.strategy	= &sysctl_intvec,
+		.extra1		= &minfactor,
+		.extra2		= &maxfactor,
+	},
+	{
+		.ctl_name	= CPU_NICKSCHED_MAX_RUN_AFFECT_FACTOR,
+		.procname	= "max_run_affect_factor",
+		.data		= &max_run_affect_factor,
+		.maxlen		= sizeof(int),
+		.mode		= 0644,
+		.proc_handler	= &proc_dointvec_minmax,
+		.strategy	= &sysctl_intvec,
+		.extra1		= &minfactor,
+		.extra2		= &maxfactor,
+	},
+	{
+		.ctl_name	= CPU_NICKSCHED_MIN_HISTORY_FACTOR,
+		.procname	= "min_history_factor",
+		.data		= &min_history_factor,
+		.maxlen		= sizeof(int),
+		.mode		= 0644,
+		.proc_handler	= &proc_dointvec_minmax,
+		.strategy	= &sysctl_intvec,
+		.extra1		= &minfactor,
+		.extra2		= &maxfactor,
+	},
+	{
+		.ctl_name	= CPU_NICKSCHED_SLEEP_FACTOR,
+		.procname	= "sleep_factor",
+		.data		= &sleep_factor,
+		.maxlen		= sizeof(int),
+		.mode		= 0644,
+		.proc_handler	= &proc_dointvec_minmax,
+		.strategy	= &sysctl_intvec,
+		.extra1		= &minsleepfactor,
+		.extra2		= &maxsleepfactor,
+	},
+	{ .ctl_name = CPU_NICKSCHED_END_OF_LIST }
+};
+
+ctl_table cpu_sched_table[] = {
+	{
+		.ctl_name	= CPU_NICKSCHED,
+		.procname	= "nicksched",
+		.mode		= 0555,
+		.child		= cpu_nicksched_table,
+	},
+	{
+		.ctl_name	= CPU_UISLEEP_FACTOR,
+		.procname	= "uisleep_factor",
+		.data		= &uisleep_factor,
+		.maxlen		= sizeof(int),
+		.mode		= 0644,
+		.proc_handler	= &proc_dointvec_minmax,
+		.strategy	= &sysctl_intvec,
+		.extra1		= &minsleepfactor,
+		.extra2		= &maxsleepfactor,
+	},
+	{
+		.ctl_name	= CPU_INTERACTIVE_LIMIT,
+		.procname	= "interactive_limit",
+		.data		= &interactive_limit,
+		.maxlen		= sizeof(int),
+		.mode		= 0644,
+		.proc_handler	= &proc_dointvec_minmax,
+		.strategy	= &sysctl_intvec,
+		.extra1		= &minshift,
+		.extra2		= &maxshift,
+	},
+	{
+		.ctl_name	= CPU_SHATTER_RATIO,
+		.procname	= "shatter_ratio",
+		.data		= &shatter_ratio,
+		.maxlen		= sizeof(int),
+		.mode		= 0644,
+		.proc_handler	= &proc_dointvec_minmax,
+		.strategy	= &sysctl_intvec,
+		.extra1		= &minshift,
+		.extra2		= &maxshift,
+	},
+	{
+		.ctl_name	= CPU_SCALED_RT_TIMESLICE,
+		.procname	= "scaled_rt_timeslice",
+		.data		= &scaled_rt_timeslice,
+		.maxlen		= sizeof(int),
+		.mode		= 0444,
+		.proc_handler	= &proc_dointvec_minmax,
+		.strategy	= &sysctl_intvec,
+	},
+	{
+		.ctl_name	= CPU_INTERACTIVE,
+		.procname	= "interactive",
+		.data		= &sched_interactive,
+		.maxlen		= sizeof(int),
+		.mode		= 0644,
+		.proc_handler	= &proc_dointvec_minmax,
+		.strategy	= &sysctl_intvec,
+	},
+	{
+		.ctl_name	= CPU_COMPUTE,
+		.procname	= "compute",
+		.data		= &sched_compute,
+		.maxlen		= sizeof(int),
+		.mode		= 0644,
+		.proc_handler	= &proc_dointvec_minmax,
+		.strategy	= &sysctl_intvec,
+	},
+	{ .ctl_name = CPU_SCHED_END_OF_LIST }
+};
+
+#endif
diff -puN kernel/sysctl.c~xsched-v02d kernel/sysctl.c
--- xsched/kernel/sysctl.c~xsched-v02d	2004-08-14 21:18:17.000000000 -0400
+++ xsched-xiphux/kernel/sysctl.c	2004-08-14 23:13:57.000000000 -0400
@@ -149,6 +149,7 @@ extern ctl_table random_table[];
 #ifdef CONFIG_UNIX98_PTYS
 extern ctl_table pty_table[];
 #endif
+extern ctl_table cpu_sched_table[];
 
 #ifdef HAVE_ARCH_PICK_MMAP_LAYOUT
 int sysctl_legacy_va_layout;
@@ -641,6 +642,12 @@ static ctl_table kern_table[] = {
 		.proc_handler   = &proc_unknown_nmi_panic,
 	},
 #endif
+	{
+		.ctl_name	= KERN_CPU_SCHED,
+		.procname	= "cpusched",
+		.mode		= 0555,
+		.child		= cpu_sched_table,
+	},
 	{ .ctl_name = 0 }
 };
 
diff -puN mm/oom_kill.c~xsched-v02d mm/oom_kill.c
--- xsched/mm/oom_kill.c~xsched-v02d	2004-08-14 21:18:20.000000000 -0400
+++ xsched-xiphux/mm/oom_kill.c	2004-08-14 23:14:05.000000000 -0400
@@ -148,7 +148,6 @@ static void __oom_kill_task(task_t *p)
 	 * all the memory it needs. That way it should be able to
 	 * exit() and clear out its resources quickly...
 	 */
-	p->time_slice = HZ;
 	p->flags |= PF_MEMALLOC | PF_MEMDIE;
 
 	/* This process has hardware access, be more careful. */
diff -puN include/linux/sysctl.h~xsched-v02d include/linux/sysctl.h
--- xsched/include/linux/sysctl.h~xsched-v02d	2004-08-14 23:34:23.150887152 -0400
+++ xsched-xiphux/include/linux/sysctl.h	2004-08-14 23:34:59.896301000 -0400
@@ -134,6 +134,7 @@ enum
 	KERN_SPARC_SCONS_PWROFF=64, /* int: serial console power-off halt */
 	KERN_HZ_TIMER=65,	/* int: hz timer on or off */
 	KERN_UNKNOWN_NMI_PANIC=66, /* int: unknown nmi panic flag */
+	KERN_CPU_SCHED=67,
 };
 
 

_
